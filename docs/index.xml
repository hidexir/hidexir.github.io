<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hidexir</title>
    <link>https://hidexir.github.io/</link>
    <description>Recent content on hidexir</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 01 Nov 2021 17:46:29 +0900</lastBuildDate><atom:link href="https://hidexir.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>enginner-stance</title>
      <link>https://hidexir.github.io/blogs/enginner-stance/</link>
      <pubDate>Mon, 01 Nov 2021 17:46:29 +0900</pubDate>
      
      <guid>https://hidexir.github.io/blogs/enginner-stance/</guid>
      <description>おすすめ資料  system design https://github.com/donnemartin/system-design-primer/blob/master/README-ja.md 心が構え https://speakerdeck.com/recruitengineers/software-engineers-survival-guide コーディング https://note.com/cyberz_cto/n/n26f535d6c575 インフラ https://12factor.net/ja/  考察 課題を適切に切り出す
良質なインプットを増やす。
常にベストプラクティスを意識する。
低レイヤーら高レイヤをある程度意識する。
これらを習慣にする。
おすすめ本 https://www.oreilly.co.jp/books/9784873117126/</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://hidexir.github.io/blogs/faq/</link>
      <pubDate>Wed, 06 Oct 2021 20:00:00 +0900</pubDate>
      
      <guid>https://hidexir.github.io/blogs/faq/</guid>
      <description>  連絡先は？ (Contact Info)
GitHub: https://github.com/hidexir
Twitter: https://twitter.com/hidexir
  一番書く言語は？
Go言語です。理由はもともと書いている時間がながく慣れているからです。 また静的型付けな部分、GCの優秀、並行処理の簡潔さ、あらゆることが標準ライブラリに備わっている。 以上の理由から一番好きです。
  セキュリティエンジニアですか？
いいえ。自分は正直インフラや開発もやるので、専任のセキュリティエンジニアとは思いません。またセキュリティエンジニアは本来プロダクト開発をわかっている。その上で成り立つと考えております。脆弱性には大きく入り口として、ロジックによるもの、CVEなどによるOSSやフレームワークによるものがあり、後者は仕組化して検知はわりとできますが、ビジネスロジックや開発フローにおける脆弱性はプロダクト開発への理解が必要です。
  いま注目している言語は？
Rustです。理由は 他の方ですが、https://hayatoito.github.io/2017/faq/#rust こちらを見ていただくのが良さそうです。
  vimmerですか？
はい。ですが、vimrcはあまり多く書きません。vimは軽量で高速だからvimです。十分vimで開発できると信じております。 また、
  サイバーやGoogleなどの会社に入らないとダメですか？
決してそれはないと思います。とはいえ上記のような企業が有利であるとかんがえるのは当然ですが、個人的にはどこの会社にいっても技術は大きく伸ばせると考えます。
目の前に課題に対して広いアプローチをもち、適切な量インプットとアウトプットをすることに尽きます。
  好きなブログの記事はなんでしょうか？
https://hayatoito.github.io/2017/faq/#dynamic-programming-language-is-dead
https://note.com/cyberz_cto/n/n26f535d6c575
https://12factor.net/ja/
  コンテナ技術に乗り換えるべきでしょうか？ 既存システムの兼ね合いですね。
かならずしも正義ではないですが、得られる恩恵はでかいです。 個人的にはインフラを特定のマニュフェストで管理できることやデプロイの容易性やグリーンブルー、スケールアウトなどが大きいと考えます。 ただレガシーな構成だとホスト内部にストレージをつくったり、ログや影響などもあるので、慎重におこなったほうがいいです。
  </description>
    </item>
    
    <item>
      <title>Cloud Native Reading Group #7: runc</title>
      <link>https://hidexir.github.io/blogs/cloud-native-reading-group-7-en/</link>
      <pubDate>Wed, 19 May 2021 20:00:00 +0900</pubDate>
      
      <guid>https://hidexir.github.io/blogs/cloud-native-reading-group-7-en/</guid>
      <description>Introduction This is a blog about my daily life.
Hello, I attended this event through the introduction of Mr. Ohtsubo of wantedly.
You can see the content of the day here.
https://zenn.dev/potsbo/scraps/f6bad62e1ac6ac
text I&amp;rsquo;m sure many of you are not familiar with the term &amp;ldquo;runc&amp;rdquo;.
I&amp;rsquo;ve been working with docker as an engineer for a while now, and there are many cases where I touch it unconsciously.
A simple history of docker can be found here.</description>
    </item>
    
    <item>
      <title>Cloud Native 読書会第7回 runc</title>
      <link>https://hidexir.github.io/blogs/cloud-native-%E8%AA%AD%E6%9B%B8%E4%BC%9A%E7%AC%AC7%E5%9B%9E-runc-copy/</link>
      <pubDate>Wed, 19 May 2021 20:00:00 +0900</pubDate>
      
      <guid>https://hidexir.github.io/blogs/cloud-native-%E8%AA%AD%E6%9B%B8%E4%BC%9A%E7%AC%AC7%E5%9B%9E-runc-copy/</guid>
      <description>はじめに なおBlogs自分の日常のメモになります。
こんにちは以前にwantedlyの大坪さんの紹介で参加しました。
こちらから当日の内容は見ることができます。
https://zenn.dev/potsbo/scraps/f6bad62e1ac6ac
本文 runcって言葉はあまり聴き馴染みがない人が多いのではないでしょうか？
すくなくてもエンジニアとしてdockerなどをさわっていると無意識に触っているケースが非常に多いです。
dockerの簡易な歴史のがこちらにまとまっております。
https://eng-blog.iij.ad.jp/archives/1478
もともとdockerはエンジンとランタイムが同じなまえでした。
しかしインターフェースと中のランタイムをわける動きが出始めました。理由としてはもともとモジュールとして分離しており、汎用性をあげることが背景にあります。
Kubernetesもなどのコンテナオーケストレーションなどでも内部ではruncなどが扱いたいため、APIとしての提供が始まるのは無理もないですね。
そしてruncはもっともレイヤーが低い low level runtimeと呼ばれております。
ここらは非常におもしろく
日本製のコンテナランタイムのハコニワ https://github.com/haconiwa/haconiwa があったり 上記は多分OCIには準拠してないはずです。なのでKuberのruntimeには使えないかもしれないです。
Googleが作っているセキュアコンテナのgVisorがあったりします。
こちらは友人が発表している資料なのですが非常にわかりやすくまた彼もコミッターなので是非一読してみるといいかもしれません。
https://speakerdeck.com/moricho/gvisordeshi-xian-surukorekarafalsekontenasekiyuritei
感想 runcが一番企画としてしりたかったこともあり非常に有意義でした！ありがとうございました。
反省 夜の時間帯でも自分の部屋を確保してもっと会話量を増やしたい。</description>
    </item>
    
    <item>
      <title>Cloud Native Reading Group #6: ArgoCD</title>
      <link>https://hidexir.github.io/blogs/cloud-native-reading-group-6-en/</link>
      <pubDate>Wed, 21 Apr 2021 20:00:00 +0900</pubDate>
      
      <guid>https://hidexir.github.io/blogs/cloud-native-reading-group-6-en/</guid>
      <description>Introduction This is a blog about my daily life.
Hello, I joined this event through the introduction of Mr. Ohtsubo from wantedly.
You can see the content of the day here.
https://zenn.dev/potsbo/scraps/8f64a637cf50f5
Text I&amp;rsquo;ve always loved cloud-native technologies, and I&amp;rsquo;ve used ArgoCD and ArgoWorkflow in my work, but I haven&amp;rsquo;t had many opportunities to dive deep into the inner workings of them.
It was not that long, but it was implemented in Go, and we read through the implementation based on the entry point of the main function.</description>
    </item>
    
    <item>
      <title>Cloud Native 読書会第6回 ArgoCD</title>
      <link>https://hidexir.github.io/blogs/cloud-native-%E8%AA%AD%E6%9B%B8%E4%BC%9A%E7%AC%AC6%E5%9B%9E-argocd/</link>
      <pubDate>Wed, 21 Apr 2021 20:00:00 +0900</pubDate>
      
      <guid>https://hidexir.github.io/blogs/cloud-native-%E8%AA%AD%E6%9B%B8%E4%BC%9A%E7%AC%AC6%E5%9B%9E-argocd/</guid>
      <description>はじめに なおBlogs自分の日常のメモになります。
こんにちは以前にwantedlyの大坪さんの紹介で参加しました。
こちらから当日の内容は見ることができます。
https://zenn.dev/potsbo/scraps/8f64a637cf50f5
本文 もともとクラウドネイティブ技術がすきでArgoCDもArgoWorkflowも業務で使ったいたのですが、内部の仕組みまで深ぼることがなかなか機会として少なかったこともありました。
時間はそこまで長くはないのですが、Goで実装がされており、main関数のエントリーポイントをベースに実装を読み進めました。
参加しているメンバーもやはりSREが業務の中心になっているかたや、もともと内部実装にある程度詳しいかたもいたのですが、Goを読むということは変わりなく。非常によかったです。
サービスの可用性を図る際にHeathCheckを行うと思うのですが、Argocdには状態が複数ありドキュメントでも多くは語られていないケースはあるのですが、Argoの場合だといかにあります。
HealthStatusCode の定義
https://github.com/argoproj/gitops-engine/blob/master/pkg/health/health.go#L8-L26
// Represents resource health statusAlexander Matyushentsev, 11 months ago: • docs: document &amp;#39;top level&amp;#39; packages (#44) type HealthStatusCode string const ( // Indicates that health assessment failed and actual health status is unknown 	HealthStatusUnknown HealthStatusCode = &amp;#34;Unknown&amp;#34; // Progressing health status means that resource is not healthy but still have a chance to reach healthy state 	HealthStatusProgressing HealthStatusCode = &amp;#34;Progressing&amp;#34; // Resource is 100% healthy 	HealthStatusHealthy HealthStatusCode = &amp;#34;Healthy&amp;#34; // Assigned to resources that are suspended or paused.</description>
    </item>
    
    <item>
      <title>Introduce Yourself</title>
      <link>https://hidexir.github.io/abouts/en/</link>
      <pubDate>Wed, 16 Dec 2020 01:14:24 +0900</pubDate>
      
      <guid>https://hidexir.github.io/abouts/en/</guid>
      <description>Info Intro Thank you for your interest.
I&amp;rsquo;m a software engineer. I like computer basics to applications.
I also have a FAQ, so I hope you will have a look at that.
Basic  Born in 1995  Carrier  Yapuri Corporation 2020~ CyberAgent, Inc. 2019~2020  New subsidiary company Cyber Pal Inc. established by new graduates The result of introducing gke istio to a small organization [Hideaki Goto (Cyber Pal Inc.</description>
    </item>
    
    <item>
      <title>自己紹介</title>
      <link>https://hidexir.github.io/abouts/ja/</link>
      <pubDate>Wed, 16 Dec 2020 01:14:24 +0900</pubDate>
      
      <guid>https://hidexir.github.io/abouts/ja/</guid>
      <description>Info Intro 閲覧ありがとうございます。
ソフトウェアエンジニアです。コンピューターの基礎からアプリケーションまで好きです。
FAQもあるのでそちらを見ていただければと思います。
Basic  1995年生まれ  Carrier  株式会社ヤプリ 2020~ 株式会社サイバーエージェント 2019~2020  新卒内定者による新子会社　株式会社Cyber Palを設立 小規模組織にgke istio導入した結果」後藤　秀昂（株式会社Cyber Pal） 株式会社AbemaTV 2018~2019   UUUM株式会社 2017~2018 deBit株式会社 2017~2018  Picking up　※内容は技術よりです。 ライブ配信でテックリード業務 想定負荷5000RPS以上で1:1:Nのライブ配信サービスの開発
大規模ということもあり、Go言語をバックエンドインフラにKubernetes(GKE)を採用しました。またネットワーク全体の関しにistioを試みました。負荷試験やセキュリティ用件など厳しかったですが、少人数により開発しました。
もともと配信をm3u8とう動画配信のストリーミングを自作をこころみたのですが、インフラコストの兼ね合いや配信部分は主に外部のSDKを採用したりなど最終的なは内部の重要部分はすべてGoで作成しました。
Go自体のパフォーマンスチューニングなども行いREADに関しては1coreで1000RPSをクリアしました。また書き込みに関しても100~300RPSの性能をだし、マシンのリソースをおしみなく使いました。
セキュリティでは主にインフラとバックエンドに関する部分もベンダー含め担当しました。内容としてはburpsuiteを用いて通信の改竄などを起きた際のサービス影響やSQLやCSRF、認証などを攻撃ベースでベンダとのダブルチェックを行いました。
データーパイプライン構築 3TB以上を毎日集計し、マルチテナントプラットフォームにのダッシュボード（データーがいろいろみれる管理画面みたいなやつ）を作成しました。
データー量が大きいので、GCPのデーターフローを採用しました。理由は安くてフルマネだからです。
また結構内部での変換処理がいろいろあったのでApache beam SDK (java)をもちいて自作テンプレートをかきました。また高速化を図るため、内部のデーターのシリアライズはAvroをつかうことで大幅なデーター削減と高速化を実現しました。
参考にメルカリでの事例や、オープンソースをみました。
Back born もともと小さい頃からコンピューターは好きでした。当時はネットサーフィンがメインで簡単なプログラムの本などで見様見真似でした。
大学時代にフロントの仕事を受けながらより本格的にバックエンド、インフラをはじめ、自分でサービスをつくったりしたものの事業作りに無知だったため、
仮想通貨事業でRustでjsonパーサーをつくったり、AbemaTVで広告の開発をしておりました。
当時は低レイヤーが好きだったこともあり、Googleのエンジニアに漠然となりたいと考えていたのですが、アルゴリズムや英語能力がたりないと感じたので、国内のもっとも力がつくと考えそのままAbemaの開発をするためCyBerAgentに入社しました。
Publish  新進気鋭のホワイトハッカーとアンチウイルスソフトがガチンコ対決! 戦いの結末をレポート istio-ingressgateway ssl https 証明書 中間証明書 導入するよ Nginxとnodejsで認証プロキシを実現する※basic認証じゃないよ！！ GKEにistio導入をした話  Skill 一般的にまともに仕事をしているとかなりの量になるので、ここでは中でも好きなこと、得意なことを中心に載せております。</description>
    </item>
    
  </channel>
</rss>
